import pygame
import sys
import random
import math

# Initialize Pygame
pygame.init()
pygame.display.set_caption("Glow Gem Collector")

# Set up the display
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))

# Clock for controlling the frame rate
clock = pygame.time.Clock()

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
DARK_BLUE = (30, 30, 60)
YELLOW = (255, 255, 0)

# Player properties
player_size = 50
player_x = WIDTH // 2
player_y = HEIGHT // 2
player_speed = 5

# Knife properties
knife_image = pygame.image.load("knifes.png")  # Load the knife image
knife_image = pygame.transform.scale(knife_image, (60, 60))  # Increase the size of the knife
knife_x = random.randint(0, WIDTH)
knife_y = random.randint(0, HEIGHT)
knife_speed = 3

# Clock (yellow circle) properties
clock_active = False  # Start with clock inactive
clock_x = random.randint(50, WIDTH - 50)
clock_y = random.randint(50, HEIGHT - 50)
clock_radius = 10
clock_effect_duration = 200  # Frames during which the knife moves slower
clock_effect_counter = 0

# Gems: a list of dicts {x: ..., y: ..., angle: ..., color: ...}
gems = []
num_initial_gems = 5
for _ in range(num_initial_gems):
    gems.append({
        "x": random.randint(20, WIDTH - 20),
        "y": random.randint(20, HEIGHT - 20),
        "angle": random.randint(0, 360),
    })

score = 0
font = pygame.font.SysFont(None, 40)
game_over_font = pygame.font.SysFont(None, 80)

# Particle effects
particles = []

def draw_particles():
    for particle in particles:
        particle[0][0] += particle[1][0]
        particle[0][1] += particle[1][1]
        particle[2] -= 0.1
        pygame.draw.circle(screen, WHITE, (int(particle[0][0]), int(particle[0][1])), int(particle[2]))
        if particle[2] <= 0:
            particles.remove(particle)

def add_particles(x, y):
    for _ in range(10):
        particles.append([[x, y], [random.uniform(-1, 1), random.uniform(-1, 1)], random.randint(3, 5)])


def draw_player(x, y):
    player_image = pygame.image.load("runner.png")  # Load runner image
    player_image = pygame.transform.scale(player_image, (player_size, player_size))  # Resize runner image
    screen.blit(player_image, (x - player_size // 2, y - player_size // 2))


def draw_gem(gem):
    gem_image = pygame.image.load("gem.png")  # Load gem image
    gem_image = pygame.transform.scale(gem_image, (50, 50))  # Resize gem image
    screen.blit(gem_image, (gem["x"] - 15, gem["y"] - 15))


def draw_knife(x, y):
    screen.blit(knife_image, (x, y))


def draw_clock(x, y):
    clock_image = pygame.image.load("clock.png")  # Load clock image
    clock_image = pygame.transform.scale(clock_image, (30, 30))  # Resize clock image
    screen.blit(clock_image, (x - 15, y - 15))


def generate_gem():
    return {
        "x": random.randint(20, WIDTH - 20),
        "y": random.randint(20, HEIGHT - 20),
        "angle": random.randint(0, 360),
    }


def draw_score():
    score_surf = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_surf, (10, 10))


def draw_game_over():
    game_over_surf = game_over_font.render("GAME OVER", True, WHITE)
    screen.blit(game_over_surf, (WIDTH // 2 - game_over_surf.get_width() // 2, HEIGHT // 2 - game_over_surf.get_height() // 2))

running = True
game_over = False
while running:
    clock.tick(60)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    if not game_over:
        # Key presses for movement
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            player_x -= player_speed
        if keys[pygame.K_RIGHT]:
            player_x += player_speed
        if keys[pygame.K_UP]:
            player_y -= player_speed
        if keys[pygame.K_DOWN]:
            player_y += player_speed

        # Keep player inside the screen boundaries
        player_x = max(player_size // 2, min(WIDTH - player_size // 2, player_x))
        player_y = max(player_size // 2, min(HEIGHT - player_size // 2, player_y))

        # Update knife position to follow the player
        effective_knife_speed = knife_speed
        if clock_effect_counter > 0:
            effective_knife_speed = knife_speed // 2
            clock_effect_counter -= 1

        if knife_x < player_x:
            knife_x += effective_knife_speed
        if knife_x > player_x:
            knife_x -= effective_knife_speed
        if knife_y < player_y:
            knife_y += effective_knife_speed
        if knife_y > player_y:
            knife_y -= effective_knife_speed

        # Check if the knife hits the player
        if math.hypot(knife_x - player_x, knife_y - player_y) < player_size // 2 + 15:
            game_over = True

        # Check if the player collects the clock
        if clock_active and math.hypot(clock_x - player_x, clock_y - player_y) < player_size // 2 + clock_radius:
            clock_active = False
            clock_effect_counter = clock_effect_duration
            clock_x, clock_y = random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 50)  # Respawn clock

        # Update gems (rotate them slightly)
        for gem in gems:
            gem["angle"] = (gem["angle"] + 2) % 360

        # Check for collisions
        collected_indices = []
        for i, gem in enumerate(gems):
            dist = math.hypot(gem["x"] - player_x, gem["y"] - player_y)
            if dist < player_size // 2 + 15:
                collected_indices.append(i)

        # Remove collected gems and increase score
        if collected_indices:
            for idx in reversed(collected_indices):
                add_particles(gems[idx]["x"], gems[idx]["y"])
                del gems[idx]
            score += len(collected_indices)

            # Activate clock after every 10 gems collected
            if score % 10 == 0:
                clock_active = True

            # Spawn new gems for each collected one
            for _ in range(len(collected_indices)):
                gems.append(generate_gem())

    # Draw everything
    screen.fill(DARK_BLUE)
    if not game_over:
        draw_player(player_x, player_y)
        draw_knife(knife_x, knife_y)
        for gem in gems:
            draw_gem(gem)
        if clock_active:
            draw_clock(clock_x, clock_y)
        draw_particles()
        draw_score()
    else:
        draw_game_over()

    # Update display
    pygame.display.flip()

pygame.quit()
sys.exit()
